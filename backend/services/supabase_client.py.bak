# backend/services/supabasedef insert(table: str, data: dict) -> dict:
    """
    Insère `data` dans `table` via l'API REST de Supabase.
    Utilise l'en-tête `apikey` pour l'authentification.
    """
    url = f"{SUPABASE_URL}/rest/v1/{table}"
    # Combinaison correcte des en-têtes pour l'authentification Supabase
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {SUPABASE_KEY}",
        "apikey": SUPABASE_KEY  # L'en-tête apikey est nécessaire pour l'API Supabase
    }
    response = httpx.post(url, json=data, headers=headers)
    # Lève une erreur si code != 2xx
    response.raise_for_status()
    return response.json()
import os
from pathlib import Path
from dotenv import load_dotenv, find_dotenv
import httpx

# 1) Charger explicitement le .env à la racine
dotenv_path = find_dotenv(usecwd=True)
if not dotenv_path:
    raise RuntimeError("❌ Impossible de trouver le fichier .env")
load_dotenv(dotenv_path, override=True)

# 2) Récupérer les variables
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_SERVICE_KEY")  # Utilise la clé de service

# 3) Validation
if not SUPABASE_URL or not SUPABASE_KEY:
    raise RuntimeError("❌ SUPABASE_URL et/ou SUPABASE_SERVICE_KEY manquant")

# 4) En-têtes HTTP
HEADERS = {
    "Content-Type":  "application/json",
    "Authorization": f"Bearer {SUPABASE_KEY}",
}

def insert(table: str, data: dict) -> dict:
    """
    Insère `data` dans `table` via l’API REST de Supabase.
    Utilise le paramètre `apikey` en query string pour l’authentification.
    """
    url = f"{SUPABASE_URL}/rest/v1/{table}"
    params = {"apikey": SUPABASE_KEY}
    response = httpx.post(url, json=data, headers=HEADERS, params=params)
    # Lève une erreur si code != 2xx
    response.raise_for_status()
    return response.json()
